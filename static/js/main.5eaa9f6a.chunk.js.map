{"version":3,"sources":["component/searchForm/SearchForm.js","component/LocationDetail/LocationDetail.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","react_default","a","createElement","className","autoComplete","onSubmit","getWeatherInfo","value","state","text","onChange","onChangeHandler","type","placeholder","onClick","SearchListHandle","searchValu","slice","map","item","index","key","data-itemid","name","LocationDetail","this","City","country","condition","temp","forcast","date","src","day","icon","alt","Component","App","firstRun","newCity","forecastDay","image","_callee","e","api","data","regenerator_default","wrap","_context","prev","next","preventDefault","_this","fetch","concat","sent","json","setState","location","localtime","current","temp_c","forecast","forecastday","console","log","stop","autoCompleteText","_callee2","search","url","_context2","target","length","event","newcityFullname","getAttribute","component_searchForm_SearchForm","bind","component_LocationDetail_LocationDetail","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5eaa9f6a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SearchForm.css\";\r\n\r\nconst SearchForm = props => {\r\n  return (\r\n    <div className=\"autoComplete\">\r\n      <form autoComplete=\"off\" onSubmit={props.getWeatherInfo}>\r\n        <input\r\n          value={props.state.text}\r\n          onChange={props.onChangeHandler}\r\n          type=\"text\"\r\n          placeholder={props.state.placeholder}\r\n        />\r\n        <input className=\"inputSubmit\" type=\"submit\" />\r\n      </form>\r\n\r\n      <ul onClick={props.SearchListHandle}>\r\n        {props.state.searchValu.slice(0, 4).map((item, index) => (\r\n          <li key={index} data-itemid={item.name}>\r\n            {item.name}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\nexport default SearchForm;\r\n","import React, { Component } from \"react\";\r\nimport \"./LocationDetail.css\";\r\n\r\nclass LocationDetail extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"locationDetail\">\r\n        <div className=\"details\">\r\n          <div className=\"detail\">\r\n            <p className=\"location\">\r\n              {this.props.state.City},{this.props.state.country}\r\n            </p>\r\n            <p className=\"condition\">{this.props.state.condition}</p>\r\n          </div>\r\n          <div className=\"temp\">\r\n            <p>{this.props.state.temp}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"forcast\">\r\n          <ul className=\"forcastUl\">\r\n            {this.props.forcast.map((item, index) => (\r\n              <li key={index}>\r\n                <p>{item.date}</p>\r\n                <img src={item.day.condition.icon} alt=\"\" />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LocationDetail;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SearchForm from \"./component/searchForm/SearchForm\";\nimport LocationDetail from \"./component/LocationDetail/LocationDetail\";\n\nclass App extends Component {\n  state = {\n    firstRun: true,\n    placeholder: \"enter city\",\n    newCity: \"tehran\",\n    City: \"\",\n    date: \"\",\n    country: \"\",\n    condition: \"\",\n    temp: \"\",\n    forecastDay: [],\n    image: \"\",\n    searchValu: [],\n    text: \"\"\n  };\n\n  onChangeHandler(event) {\n    this.setState({ text: event.target.value });\n    this.autoCompleteText(event);\n  }\n\n  getWeatherInfo = async e => {\n    e.preventDefault();\n\n    if (this.state.newCity !== \"\") {\n      const api = await fetch(\n        `https://api.apixu.com/v1/forecast.json?key=1652ea732ca848b7bd6100429192205&q=${\n          this.state.newCity\n        }&days=6`\n      );\n      const data = await api.json();\n      this.setState({\n        City: data.location.name,\n        country: data.location.country,\n        date: data.location.localtime,\n        temp: data.current.temp_c,\n        image: data.current.condition.icon,\n        condition: data.current.condition.text,\n        text: \"\",\n        placeholder: this.state.text,\n        forecastDay: data.forecast.forecastday\n      });\n      console.log(this.state.forecastDay);\n    }\n  };\n\n  autoCompleteText = async e => {\n    const search = e.target.value;\n    const url = await fetch(\n      `https://api.apixu.com/v1/search.json?key=1652ea732ca848b7bd6100429192205&q=${search}`\n    );\n    var data = await url.json();\n\n    if (search.length >= 3) {\n      this.setState({\n        searchValu: data,\n\n        newCity: search\n      });\n    } else {\n      this.setState({\n        searchValu: []\n      });\n    }\n  };\n\n  SearchListHandle(event) {\n    this.setState({\n      newcityFullname: event.target.getAttribute(\"data-itemid\"),\n      text: event.target.getAttribute(\"data-itemid\"),\n      searchValu: []\n    });\n    this.getWeatherInfo(event);\n  }\n\n  render() {\n    return (\n      <div className=\"navbar\">\n        <div>\n          <SearchForm\n            state={this.state}\n            getWeatherInfo={this.getWeatherInfo.bind(this)}\n            onChangeHandler={this.onChangeHandler.bind(this)}\n            SearchListHandle={this.SearchListHandle.bind(this)}\n          />\n        </div>\n        <div>\n          <LocationDetail state={this.state} forcast={this.state.forecastDay} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}